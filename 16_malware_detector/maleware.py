#!/usr/bin/env python

""" problem.py: Basic templete to solve the prooblems of the Tuenti Challenge 2 """

from itertools import *

__author__ = "Alonso Vidales"
__email__ = "alonso.vidales@tras2.es"
__date__ = "2012-04-27"

class Problem:
	"""
	Generic class to solve the problems
	"""

	__programs = {
		'known': [],
		'unknown': []
	}

	def solve(self):
		"""
		Method that reolves te problem and resturns the solutions in an array of strings
		"""

		weights = [0] * (len(self.__programs['known'][0]) - 1)
		totalCalls = [0] * (len(self.__programs['known'][0]) - 1)

		# Calculate the weight of each kind of detection
		for software in self.__programs['known']:
			for callPos in range(1, len(software)):
				totalCalls[callPos - 1] += int(software[callPos])
				if software[0] == 'M':
					weights[callPos - 1] -= int(software[callPos])
				else:
					weights[callPos - 1] +=  int(software[callPos])

		for pos in range(0, len(weights)):
			weights[pos] = float(weights[pos]) / totalCalls[pos]

		totalMalewareCalls = 0
		# Test all the unkow software using the previuos calculated weights
		for software in self.__programs['unknown']:
			calification = 0.0
			for callPos in range(0, len(software)):
				calification += float(software[callPos]) * weights[callPos]

			# This is maleware :), sum all the calls to the total calls
			if calification < 0:
				for calls in software:
					totalMalewareCalls += int(calls)

		return totalMalewareCalls

	def __init__(self, inInputLines):
		""" Takes and parse the input lines into the internal structure """
		for count in range(0, int(inInputLines[0])):
			info = inInputLines[count + 3].split()
			self.__programs['known'].append(info)

		for count in range(0, int(inInputLines[1])):
			info = inInputLines[count + int(inInputLines[0]) + 3].split()
			self.__programs['unknown'].append(info)

# I'll use raw_input to get the lines because I can't import fileinput on the test server
fileLines = []
while True:
	try:
		fileLines.append(raw_input())
	except (EOFError):
		break #end of file reached

problem = Problem(fileLines)
solution = problem.solve()

# Send the output to the stdout
print(solution)	
